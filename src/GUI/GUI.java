/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import MainClasses.Archivo;
import MainClasses.Block;
import MainClasses.SD;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.Color;
// En la sección de imports de GUI.java
import javax.swing.JPanel; // <-- Añade esta línea
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import java.awt.GridLayout;
import java.awt.Dimension;

/**
 *
 * @author pedro
 */
public class GUI extends javax.swing.JFrame {
    private DefaultTreeModel modelo;
    private DefaultMutableTreeNode nodoSeleccionado;
    private DefaultTableModel tableModel;
    private SD sd = new SD();
    // En la clase GUI:
private JPanel panelSD; // Reemplazar el JTextArea SD

// En el constructor:
private void initSDVisual() {
    panelSD = new JPanel(new GridLayout(5, 7, 2, 2)); // 35 bloques en grid 5x7
    panelSD.setPreferredSize(new Dimension(380, 340));
    jScrollPane4.setViewportView(panelSD);
    actualizarSDVisual();
}

// Método para actualizar la visualización
private void actualizarSDVisual() {
    panelSD.removeAll();
    Block[] bloques = sd.getBloques();
    
    for (Block bloque : bloques) {
        JPanel bloquePanel = new JPanel();
        bloquePanel.setBackground(bloque.color);
        bloquePanel.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        panelSD.add(bloquePanel);
    }
    
    panelSD.revalidate();
    panelSD.repaint(); // Forzar repintado
}
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        modelo = new DefaultTreeModel(new DefaultMutableTreeNode("raiz"));
        arbol.setModel(modelo);
        showMovements.setText("");
        tableModel = new DefaultTableModel();
        tableModel.addColumn("Nombre del archivo");
        tableModel.addColumn("Bloques Asignados");
        tableModel.addColumn("Direccion del primer bloque");
        tableModel.addColumn("Color");
        jTable1.setModel(tableModel);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer());
        this.setLocationRelativeTo(null);
        initSDVisual();
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        jComboBox1 = new javax.swing.JComboBox<>();
        exit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        showMovements = new javax.swing.JTextArea();
        selectNodo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        sizefile = new javax.swing.JSlider();
        jScrollPane4 = new javax.swing.JScrollPane();
        SD = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbol.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(arbol);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 180, 170));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Usuario" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, -1, -1));

        exit.setBackground(new java.awt.Color(255, 0, 0));
        exit.setText("X");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, 280, 210));

        showMovements.setColumns(20);
        showMovements.setRows(5);
        jScrollPane3.setViewportView(showMovements);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 330, 140));
        getContentPane().add(selectNodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 160, -1));

        jLabel1.setText("Nombre del archivo: ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        jLabel2.setText("Espacio del archivo: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, -1, -1));

        btnCreate.setText("Crear");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        getContentPane().add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, -1, -1));

        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, -1, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 200, -1, -1));
        getContentPane().add(sizefile, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, -1, -1));

        SD.setColumns(20);
        SD.setRows(5);
        jScrollPane4.setViewportView(SD);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, 380, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        String nombreArchivo = this.selectNodo.getText();
        int bloquesNecesarios = sizefile.getValue(); // Obtener valor del slider
        
        if (bloquesNecesarios <= 0) {
            agregarMensaje("Error", "Tamaño inválido");
            return;
        }
        
        // Generar color único para el archivo
        Color colorArchivo = new Color(
            (int) (Math.random() * 256),
            (int) (Math.random() * 256),
            (int) (Math.random() * 256)
        );
        
        // Crear nuevo archivo con color
        Archivo nuevoArchivo = new Archivo(nombreArchivo, bloquesNecesarios, colorArchivo);
        
        if (sd.asignarBloques(nuevoArchivo, bloquesNecesarios)) {
            // Crear nodo con objeto Archivo
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(nuevoArchivo);
            
            if (nodoSeleccionado != null) {
                modelo.insertNodeInto(nodo, nodoSeleccionado, nodoSeleccionado.getChildCount());
                
                // Agregar a la tabla
                String primerBloque = nuevoArchivo.listaBloques.isEmpty() ? 
                    "N/A" : String.valueOf(nuevoArchivo.listaBloques.getpFirst().gettInfo());
                
                tableModel.addRow(new Object[]{
                    nombreArchivo,
                    bloquesNecesarios,
                    primerBloque,
                    colorArchivo
                });
                
                actualizarSDVisual();
                agregarMensaje("Creado", nombreArchivo);
            }
        } else {
            agregarMensaje("Error", "Espacio insuficiente");
        }
    
    }//GEN-LAST:event_btnCreateActionPerformed

    private void arbolValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolValueChanged
       nodoSeleccionado = (DefaultMutableTreeNode) arbol.getLastSelectedPathComponent();
    if (nodoSeleccionado != null) {
        Object userObject = nodoSeleccionado.getUserObject();
        if (userObject instanceof Archivo) {
            Archivo archivo = (Archivo) userObject;
            selectNodo.setText(archivo.nombre); // Mostrar el nombre en el campo de texto
        }
    }
    }//GEN-LAST:event_arbolValueChanged

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (nodoSeleccionado != null) {
        Object userObject = nodoSeleccionado.getUserObject();
        if (userObject instanceof Archivo) {
            Archivo archivo = (Archivo) userObject;
            
            // Liberar bloques en la SD
            sd.liberarBloques(archivo); // <-- Paso crítico
            
            // Eliminar de la tabla
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                if (tableModel.getValueAt(i, 0).equals(archivo.nombre)) {
                    tableModel.removeRow(i);
                    break;
                }
            }
            
            // Eliminar del árbol
            modelo.removeNodeFromParent(nodoSeleccionado);
            
            // Actualizar visualización del SD
            actualizarSDVisual(); // <-- Forzar actualización
            agregarMensaje("Eliminado", archivo.nombre);
        }
    }
    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (nodoSeleccionado != null) {
            String textoAnterior = (String) nodoSeleccionado.getUserObject();
            String textoNuevo = this.selectNodo.getText();
            nodoSeleccionado.setUserObject(textoNuevo);
            modelo.nodeChanged(nodoSeleccionado);
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                if (tableModel.getValueAt(i, 0).equals(textoAnterior)) {
                    tableModel.setValueAt(textoNuevo, i, 0); // Actualizar el nombre del archivo
                    break;
                }
            }
            agregarMensaje("Nodo actualizado", textoAnterior + " -> " + textoNuevo);
        } else {
            agregarMensaje("Error", "No se ha seleccionado un nodo para actualizar."); // Mensaje de error
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea SD;
    private javax.swing.JTree arbol;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton exit;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField selectNodo;
    private javax.swing.JTextArea showMovements;
    private javax.swing.JSlider sizefile;
    // End of variables declaration//GEN-END:variables
    
    private void agregarMensaje(String accion, String nombreNodo) {
        String hora = obtenerHoraActual();
        String mensaje = "[" + hora + "] " + accion + ": " + nombreNodo; // Mensaje para el JTextArea
        showMovements.append(mensaje + "\n"); // Agrega el mensaje al JTextArea
        showMovements.setCaretPosition(showMovements.getDocument().getLength()); // Desplaza el scroll al final
    }
    
    private void agregarFilaATabla(String nombreArchivo, int bloquesAsignados, String direccionPrimerBloque, Color color) {
        tableModel.addRow(new Object[]{nombreArchivo, bloquesAsignados, direccionPrimerBloque, color});
    }
    
    private String obtenerHoraActual() {
        LocalDateTime ahora = LocalDateTime.now(); 
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); 
        return ahora.format(formatter); 
    }
    
    class ColorRenderer extends javax.swing.table.DefaultTableCellRenderer {
        @Override
        public java.awt.Component getTableCellRendererComponent(
            javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            java.awt.Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value instanceof Color) {
                cell.setBackground((Color) value); 
                cell.setForeground((Color) value); 
            }
            return cell;
        }
    }
}
